using Microsoft.Xna.Framework;
using Ni.NiModPlayer;
using Ni.Projectiles;
using Ni.Projectiles.Minions;
using System;
using Terraria;
using Terraria.Audio;
using Terraria.DataStructures;
using Terraria.ID;
using Terraria.ModLoader;
using Ni.DownWell;

namespace Ni.Items.Weapons
{
	public class 模板剑 : ModItem
	{
		public delegate bool ShootDelegate(Player player, EntitySource_ItemUse_WithAmmo source, Vector2 position, Vector2 velocity, int type, int damage, float knockback);
		public override void SetStaticDefaults()
		{
			// DisplayName.SetDefault("模板剑"); // By default, capitalization in classnames will add spaces to the display name. You can customize the display name here by uncommenting this line.
			Tooltip.SetDefault("This is a basic modded sword.");
		}

		public override void SetDefaults()
		{
			Item.damage = 0;
			Item.DamageType = DamageClass.Melee;
			Item.width = 40;
			Item.height = 40;
			Item.useTime = 20;
			Item.useAnimation = 20;
			Item.useStyle = ItemUseStyleID.Swing;
			Item.knockBack = 6f;
			Item.value = 10000;
			Item.rare = ItemRarityID.Green;
			Item.UseSound = SoundID.Item1;
			Item.autoReuse = true;
			Item.shoot = ModContent.ProjectileType<HecateBullet>();
			Item.shootSpeed = 1f;
			Item.noUseGraphic = true;
            Item.noMelee = true;
        }

		public override bool Shoot(Player player, EntitySource_ItemUse_WithAmmo source, Vector2 position, Vector2 velocity, int type, int damage, float knockback)
		{
			Vector2 tomouse = Main.MouseWorld - player.Center;
			tomouse.Normalize();

			int posleftx = Main.spawnTileX - 15;
			int poslefty = Main.spawnTileY;
			for (int offsetx = 0; offsetx < 30; offsetx++)
			{
				WorldGen.PlaceTile(posleftx + offsetx, poslefty, TileID.Dirt);
			}
			Main.NewText($"{DownWellWorldGen.DownWellWorld}");
			//if(player.altFunctionUse == 2)
			//{
			//	player.statLife -= 100;
			//}
			//for(int i = 0; i < 4; i++)
			//{
			//	player.GetModPlayer<NiPlayer>().Upgraded[i] = false;
			//}
			//AudioSystem.PlaySound(AssetLoader.SoundPath + "weapon_electricwhip_release1.wav", 1f);
			//var p = Projectile.NewProjectileDirect(source, player.Center, Vector2.Zero, ModContent.ProjectileType<FlameLogicProj>(), 0, 0f, player.whoAmI);
			//for(int i = 0; i < 1000; i++)
			//{
			//	Main.projectile[i].Kill();
			//	Main.projectile[i].active = false;
			//	Main.projectile[i] = null;
			//}
			//Main.projectile[0].whoAmI += 0;
			return false;
		}


		public override bool? UseItem(Player player)
        {
            return base.UseItem(player);
        }
        public override bool AltFunctionUse(Player player)
        {
            return true;
        }
        public override void AddRecipes()
		{
			Recipe recipe = CreateRecipe();
			recipe.AddIngredient(ItemID.DirtBlock, 10);
			recipe.AddTile(TileID.WorkBenches);
			recipe.Register();
		}
	}
}